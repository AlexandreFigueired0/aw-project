openapi: 3.0.0
info:
  title: "QRMeats API"
  description: "API for meats and markets"
  version: "1.0.0"

servers:
  - url: "/api"

tags:
  - name: "Authentication"
    description: "Manages authentication logic"
    
  - name: "UsersManagement"
    description: "Manages Users"
    
  - name: "NewsManagement"
    description: "Manages News"
    
  - name: "MarketsManagement"
    description: "Manages Markets"
    
  - name: "FeedbackManagement"
    description: "Manages feedback"
    
  - name: "StatisticsManagement"
    description: "Manages statistics"

  - name: "MapManagement"
    description: "Manages the maps"
    
  - name: "MarketProductsInStockManagement"
    description: "Manages the stock of the markets"
    
  - name: "UserSavedProductsManagement"
    description: "Manages the products saved by users"
    

components:
  schemas:
    User:
      type: "object"
      required:
        - user_id
        - username
        - password
        - email
        - photo_url
      properties:
        user_id:
          type: "string"
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        photo_url:
          type: "string"
    Product:
      type: "object"
      required:
        - product_id
        - name
        - details
      properties:
        product_id:
          type: "string"
        name:
          type: "string"
        details:
          type: "array"
          items:
            type: "string"
    News:
      type: "object"
      required:
        - news_id
        - title
        - source
        - main_text
        - image_url
      properties:
        news_id:
          type: "string"
        title:
          type: "string"
        source:
          type: "string"
        main_text:
          type: "string"
        image_url:
          type: "string"
    Market:
      type: "object"
      required:
        - market_id
        - name
        - location
      properties:
        market_id:
          type: "string"
        name:
          type: "string"
        location:
          type: "string"
    Feedback:
      type: "object"
      required:
        - feedback_id
        - user_id
        - product_id
      properties:
        feedback_id:
          type: "string"
        user_id:
          type: "string"
        product_id:
          type: "string"
    Stats:
      type: "object"
      required:
        - stats_id
        - stats
      properties:
        stats_id:
          type: "string"
        stats:
          type: "array"
          items:
            type: "string"
    ProductStockInMarket:
      type: "object"
      required:
        - product_stock_in_market_id
        - market_id
        - product_id
        - quantity
      properties:
        product_stock_in_market_id:
          type: "string"
        market_id:
          type: "string"
        product_id:
          type: "string"
        quantity:
          type: "integer"
    ProductSavedByUser:
      type: "object"
      required:
        - product_saved_by_user_id
        - user_id
        - product_id
      properties:
        product_saved_by_user_id:
          type: "string"
        user_id:
          type: "string"
        product_id:
          type: "string"


  parameters:
    user_id:
      name: "user_id"
      description: "Id of the user"
      in: path
      required: True
      schema:
        type: "string"
    product_id:
      name: "product_id"
      description: "Id of the product"
      in: path
      required: True
      schema:
        type: "string"
    market_id:
      name: "market_id"
      description: "Id of the market"
      in: path
      required: True
      schema:
        type: "string"
    news_id:
      name: "news_id"
      description: "Id of the new"
      in: path
      required: True
      schema:
        type: "string"
    stat_id:
      name: "stat_id"
      description: "Id of the stat"
      in: path
      required: True
      schema:
        type: "string"
    location:
      name: "location"
      description: "Text representation of a location"
      in: path
      required: True
      schema:
        type: "string"
      
      

paths:
  /authentication:
    post:
      tags: 
        - "Authentication"
      summary: "Authenticates the user"
      requestBody:
              description: "Authentication token"
              content:
                application/json:
                  schema:
                    type: "object"
                    properties:
                      token:
                        type: "string"
      responses:
        "200":
          description: "Successfully authenticated"
          
  /users:
    get:
      tags:
        - "UsersManagement"
      summary: "Returns the list of all users in the system"
      responses:
        "200":
          description: "Successfully read users list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - "UsersManagement"
      summary: "Creates a User"
      requestBody:
              description: "The User to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/User'
      responses:
        "200":
          description: "Successfully added User"

  /users/{user_id}:
    get:
      tags:
        - "UsersManagement"
      summary: "Returns the User with the given id"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read User details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - "UsersManagement"
      summary: "Update the User with the given id"
      parameters:
        - $ref: "#/components/parameters/user_id"
      requestBody:
              description: "User updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/User'
      responses:
        "200":
          description: "Successfully updated User"
    delete:
      tags:
        - "UsersManagement"
      summary: "Deletes the User with the given id"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully deleted User"
          
  /products:
    get:
      tags:
        - "ProductsManagement"
      summary: "Returns the list of all products in the system"
      responses:
        "200":
          description: "Successfully read products list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
        - "ProductsManagement"
      summary: "Creates a Product"
      requestBody:
              description: "The Product to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: "Successfully added Product"

  /products/{product_id}:
    get:
      tags:
        - "ProductsManagement"
      summary: "Returns the Product with the given id"
      parameters:
        - $ref: "#/components/parameters/product_id"
      responses:
        "200":
          description: "Successfully read Product details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags:
        - "ProductsManagement"
      summary: "Update the Product with the given id"
      parameters:
        - $ref: "#/components/parameters/product_id"
      requestBody:
              description: "Product updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Product'
      responses:
        "200":
          description: "Successfully updated Product"
    delete:
      tags:
        - "ProductsManagement"
      summary: "Deletes the Product with the given id"
      parameters:
        - $ref: "#/components/parameters/product_id"
      responses:
        "200":
          description: "Successfully deleted Product"
          
  /news:
    get:
      tags:
        - "NewsManagement"
      summary: "Returns the list of all news in the system"
      responses:
        "200":
          description: "Successfully read News list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/News"
    post:
      tags:
        - "NewsManagement"
      summary: "Create News"
      requestBody:
              description: "The News to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/News'
      responses:
        "200":
          description: "Successfully added News"

  /news/{news_id}:
    get:
      tags:
        - "NewsManagement"
      summary: "Returns the News with the given id"
      parameters:
        - $ref: "#/components/parameters/news_id"
      responses:
        "200":
          description: "Successfully read News details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
    put:
      tags:
        - "NewsManagement"
      summary: "Update the News with the given id"
      parameters:
        - $ref: "#/components/parameters/news_id"
      requestBody:
              description: "News updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/News'
      responses:
        "200":
          description: "Successfully updated News"
    delete:
      tags:
        - "NewsManagement"
      summary: "Deletes the News with the given id"
      parameters:
        - $ref: "#/components/parameters/news_id"
      responses:
        "200":
          description: "Successfully deleted News"

  /markets:
    get:
      tags:
        - "MarketsManagement"
      summary: "Returns the list of all markets in the system"
      responses:
        "200":
          description: "Successfully read Markets list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Market"
    post:
      tags:
        - "MarketsManagement"
      summary: "Create a Market"
      requestBody:
              description: "The Market to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Market'
      responses:
        "200":
          description: "Successfully added Market"

  /markets/{market_id}:
    get:
      tags:
        - "MarketsManagement"
      summary: "Returns the Market with the given id"
      parameters:
        - $ref: "#/components/parameters/market_id"
      responses:
        "200":
          description: "Successfully read Market details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
    put:
      tags:
        - "MarketsManagement"
      summary: "Update the Market with the given id"
      parameters:
        - $ref: "#/components/parameters/market_id"
      requestBody:
              description: "Market updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Market'
      responses:
        "200":
          description: "Successfully updated News"
    delete:
      tags:
        - "MarketsManagement"
      summary: "Deletes the Market with the given id"
      parameters:
        - $ref: "#/components/parameters/market_id"
      responses:
        "200":
          description: "Successfully deleted Market"
          
  /feedbacks:
    get:
      tags:
        - "FeedbackManagement"
      summary: "Returns the list of all feedback in the system"
      responses:
        "200":
          description: "Successfully read Feedback list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Feedback"
    post:
      tags:
        - "FeedbackManagement"
      summary: "Create a Feedback"
      requestBody:
              description: "The Feedback to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Feedback'
      responses:
        "200":
          description: "Successfully added Feedback"
  /feedbacks/{product_id}:
    get:
      tags:
        - "FeedbackManagement"
      summary: "Returns the list of Feedbacks about the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
      responses:
        "200":
          description: "Successfully read the list of Feedbacks"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Feedback'
    delete:
      tags:
        - "FeedbackManagement"
      summary: "Deletes all Feedbkacs for the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
      responses:
        "200":
          description: "Successfully deleted Feedbacks"
                

  /feedbacks/{product_id}/{user_id}:
    get:
      tags:
        - "FeedbackManagement"
      summary: "Returns the Feedback given by the User, with user_id, about the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read the Feedback"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
    put:
      tags:
        - "FeedbackManagement"
      summary: "Update the Feedback given by the User, with user_id, about the Product, with product_id "
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/user_id"
      requestBody:
              description: "Feedback updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Feedback'
      responses:
        "200":
          description: "Successfully updated News"
    delete:
      tags:
        - "FeedbackManagement"
      summary: "Deletes the Feedback"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully deleted Market"
          
  /stats:
    get:
      tags:
        - "StatisticsManagement"
      summary: "Returns the list of all statistics in the system"
      responses:
        "200":
          description: "Successfully read statistics list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Stats"
    post:
      tags:
        - "StatisticsManagement"
      summary: "Creates a Stat"
      requestBody:
              description: "The Stat to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Stats'
      responses:
        "200":
          description: "Successfully added User"

  /stats/{stat_id}:
    get:
      tags:
        - "StatisticsManagement"
      summary: "Returns the Stat with the given id"
      parameters:
        - $ref: "#/components/parameters/stat_id"
      responses:
        "200":
          description: "Successfully read Stat"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
    put:
      tags:
        - "StatisticsManagement"
      summary: "Update the Stat with the given id"
      parameters:
        - $ref: "#/components/parameters/stat_id"
      requestBody:
              description: "Stat updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Stats'
      responses:
        "200":
          description: "Successfully updated Stat"
    delete:
      tags:
        - "StatisticsManagement"
      summary: "Deletes the Stat with the given id"
      parameters:
        - $ref: "#/components/parameters/stat_id"
      responses:
        "200":
          description: "Successfully deleted Stat"
          
  /stats/latest:
    get:
      tags:
        - "StatisticsManagement"
      summary: "Returns the latest Stat"
      responses:
        "200":
          description: "Successfully read Stat"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
  
  /maps/{location}:
    get:
      tags:
        - "MapManagement"
      summary: "Returns the information for the map in the app"
      parameters:
        - $ref: "#/components/parameters/location"
      responses:
        "200":
          description: "Successfully processed location details"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
  
  /market_products:
    get:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Returns the list of all Products stocks in all Markets"
      responses:
        "200":
          description: "Successfully read list of ProductsStockInMarket for all markets"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductStockInMarket"
    post:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Create a ProductStockInMarket"
      requestBody:
              description: "The ProductStockInMarket to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProductStockInMarket'
      responses:
        "200":
          description: "Successfully added ProductStockInMarket"
  /market_products/{market_id}:
    get:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Returns the list of all product stocks in the market with market_id"
      parameters:
        - $ref: "#/components/parameters/market_id"
      responses:
        "200":
          description: "Successfully read the list of ProductStockInMarket"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/ProductStockInMarket'
    delete:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Deletes all ProductStockInMarket for the Market, with market_id"
      parameters:
        - $ref: "#/components/parameters/market_id"
      responses:
        "200":
          description: "Successfully deleted all ProductStockInMarkets, for the Market with market_id"
                

  /market_products/{market_id}/{product_id}:
    get:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Returns the ProductStockInMarket in the Market, with market_id, for the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/market_id"
      responses:
        "200":
          description: "Successfully read the ProductStockInMarket"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductStockInMarket'
    put:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Update the ProductStockInMarket in the Market, with market_id, for the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/market_id"
      requestBody:
              description: "ProductStockInMarket updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProductStockInMarket'
      responses:
        "200":
          description: "Successfully updated ProductStockInMarket"
    delete:
      tags:
        - "MarketProductsInStockManagement"
      summary: "Deletes the ProductStockInMarket"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/market_id"
      responses:
        "200":
          description: "Successfully deleted ProductStockInMarket"
  
  /user_products:
    get:
      tags:
        - "UserSavedProductsManagement"
      summary: "Returns the list of all ProductsSavedByUser, for all users"
      responses:
        "200":
          description: "Successfully read list of ProductsSavedByUser for all users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductSavedByUser"
    post:
      tags:
        - "UserSavedProductsManagement"
      summary: "Create a ProductStockInMarket"
      requestBody:
              description: "The ProductsSavedByUser to add"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProductSavedByUser'
      responses:
        "200":
          description: "Successfully added ProductsSavedByUser"
  /{user_id}:
    get:
      tags:
        - "UserSavedProductsManagement"
      summary: "Returns the list of all ProductsSavedByUser, for the user with user_id"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read the list of ProductsSavedByUser"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/ProductSavedByUser'
    delete:
      tags:
        - "UserSavedProductsManagement"
      summary: "Deletes all ProductsSavedByUser for the User, with user_id"
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully deleted all ProductsSavedByUser, for the User with user_id"
                

  /user_products/{user_id}/{product_id}:
    get:
      tags:
        - "UserSavedProductsManagement"
      summary: "Returns the ProductsSavedByUser for the User, with user_id, and the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully read the ProductsSavedByUser"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSavedByUser'
    put:
      tags:
        - "UserSavedProductsManagement"
      summary: "Update the ProductsSavedByUser for the User, with user_id, and the Product, with product_id"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/user_id"
      requestBody:
              description: "ProductsSavedByUser updated"
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ProductSavedByUser'
      responses:
        "200":
          description: "Successfully updated ProductsSavedByUser"
    delete:
      tags:
        - "UserSavedProductsManagement"
      summary: "Deletes the ProductsSavedByUser"
      parameters:
        - $ref: "#/components/parameters/product_id"
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: "Successfully deleted ProductsSavedByUser"

                